import os
import pandas as pd
import plotly.express as px
import json
from flask import Flask, request, jsonify, render_template, session
from plotly.utils import PlotlyJSONEncoder
import uuid

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # Required for session management

# Folder to temporarily save uploaded files
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Ensure upload folder exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Normalize column names in the uploaded CSV and preserve original names
def normalize_columns(df):
    original_columns = df.columns.tolist()  # Store original column names
    df.columns = df.columns.str.lower().str.strip().str.replace(' ', '_')  # Clean columns for internal use
    return df, original_columns  # Return both cleaned and original columns

# Check if 50% or more columns match our library
def validate_file_columns(df, column_library):
    normalized_cols = set(df.columns)
    matching_cols = [col for col in normalized_cols if col in column_library]
    match_percentage = (len(matching_cols) / len(df.columns)) * 100
    return match_percentage >= 10, match_percentage  # Changed to 10% as per your request

# Reset session data for each new CSV upload
def reset_session_data():
    session.pop('shown_graphs', None)  # Clear previously shown graphs from session
    session.pop('file_id', None)  # Clear previous file reference
    session.pop('original_columns', None)  # Clear original column names

# Example library of column names
column_library = ['sales', 'orders', 'email', 'country', 'city', 'accepts_email_marketing',
                  'quantity', 'discount', 'profit', 'ship_mode', 'segment', 'category',
                  'sub-category', 'product_name', 'region']

@app.route('/')
def home():
    return '''
    <!doctype html>
    <title>Upload CSV</title>
    <h1>Upload CSV File</h1>
    <form method=post enctype=multipart/form-data action="/upload">
      <input type=file name=file>
      <input type=submit value=Upload>
    </form>
    '''

@app.route('/upload', methods=['POST'])
def upload_file():
    reset_session_data()  # Clear previous data

    if 'file' not in request.files:
        return "No file part", 400
    file = request.files['file']
    if file.filename == '':
        return "No selected file", 400

    try:
        # Generate a unique ID for this file
        file_id = str(uuid.uuid4())
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file_id + ".csv")

        # Save the file to the server
        file.save(file_path)

        # Read the file into a dataframe
        df = pd.read_csv(file_path)

        # Normalize columns and get original column names
        df, original_columns = normalize_columns(df)

        # Store file reference and original column names in the session
        session['file_id'] = file_id
        session['shown_graphs'] = []
        session['original_columns'] = original_columns  # Store original column names in session

        # Validate file based on column match
        is_valid, match_percentage = validate_file_columns(df, column_library)
        if not is_valid:
            return f"File rejected: Only {match_percentage}% of columns match our library. Too many differences."

        # Generate 4 graphs
        graphs = []
        for _ in range(4):
            graph = suggest_graph(df)
            if graph:
                graphs.append(json.dumps(graph, cls=PlotlyJSONEncoder))

        if graphs:
            return render_template('graph.html', graphs=graphs)
        else:
            return "No new graphs available."

    except Exception as e:
        return f"Error processing file: {str(e)}", 500

@app.route('/new_graph', methods=['POST'])
def new_graph():
    try:
        file_id = session.get('file_id')
        if not file_id:
            return jsonify({"error": "No file uploaded"}), 400

        # Load the file again
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file_id + ".csv")
        df = pd.read_csv(file_path)
        df, _ = normalize_columns(df)  # We don't need original columns here since it's already in session

        # Generate a new graph
        graph = suggest_graph(df)
        if graph:
            graph_json = json.dumps(graph, cls=PlotlyJSONEncoder)
            return jsonify({"graph": graph_json})
        else:
            return jsonify({"error": "No new graphs available."})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# Suggest graph based on session-stored dataframe
# Suggest graph based on session-stored dataframe
def suggest_graph(df):
    shown_graphs = session.get('shown_graphs', [])
    original_columns = session.get('original_columns', df.columns.tolist())  # Get original column names

    # Columns to treat like Sales (including Total Spent and Total Orders)
    financial_cols = ['sales', 'quantity', 'discount', 'profit', 'orders', 'total_spent', 'total_orders']

    # Columns to treat like Country for grouping and chart selection
    categorical_cols = ['country', 'ship_mode', 'segment', 'category', 'sub-category', 'product_name', 'region']

    # Columns to ignore completely (remove them from the dataframe upfront)
    ignore_cols = ['row_id', 'order_id', 'customer_id', 'postal_code', 'product_id', 'id', 'productid']

    # Step 0: Completely remove ignored columns from the dataframe
    df = df[[col for col in df.columns if col not in ignore_cols]]

    available_graphs = []

    # Step 1: Process date-like columns ONLY for financial columns (line chart logic)
    for col in df.columns:
        if "date" in col.lower():
            try:
                df[col] = pd.to_datetime(df[col], errors='coerce')
                if df[col].notna().sum() == 0:  # Skip if the column is not a valid date
                    continue

                df['month'] = df[col].dt.to_period('M').dt.strftime('%Y-%m')

                # Generate line chart only for financial columns
                for fin_col in financial_cols:
                    if fin_col in df.columns:
                        df[fin_col] = pd.to_numeric(df[fin_col], errors='coerce')
                        df_grouped = df.groupby('month')[fin_col].sum().reset_index()

                        chart_title = f'Sum of {fin_col} vs {col}'
                        graph = px.line(df_grouped, x='month', y=fin_col,
                                        title=chart_title,
                                        labels={'month': col, fin_col: fin_col})
                        available_graphs.append((graph, col, fin_col))
            except Exception as e:
                print(f"Error processing date column {col}: {e}")

    # Step 2: Process categorical columns for bar/pie charts
    for fin_col in financial_cols:
        if fin_col in df.columns:
            df[fin_col] = pd.to_numeric(df[fin_col], errors='coerce')

            for cat_col in categorical_cols:
                if cat_col in df.columns:
                    unique_count = df[cat_col].nunique()

                    if unique_count <= 5:
                        df_grouped = df.groupby(cat_col)[fin_col].sum().reset_index()
                        graph = px.pie(df_grouped, names=cat_col, values=fin_col,
                                       title=f'{fin_col} distribution by {cat_col}')
                    elif 5 < unique_count <= 10:
                        df_grouped = df.groupby(cat_col)[fin_col].sum().reset_index()
                        graph = px.bar(df_grouped, x=cat_col, y=fin_col,
                                       title=f'Sum of {fin_col} by {cat_col}')
                    else:
                        df_grouped = df.groupby(cat_col)[fin_col].sum().nlargest(10).reset_index()
                        graph = px.bar(df_grouped, x=cat_col, y=fin_col,
                                       title=f'Sum of {fin_col} by {cat_col} (Top 10)')

                    available_graphs.append((graph, fin_col, cat_col))

    # Ensure no repeated graphs are shown
    unique_available_graphs = [g for g in available_graphs if (g[1], g[2]) not in shown_graphs]

    # DEBUG: Check how many unique graphs are available
    print(f"Unique available graphs: {len(unique_available_graphs)}")

    if unique_available_graphs:
        selected_graph = unique_available_graphs[0]  # Select a new unique graph
        shown_graphs.append((selected_graph[1], selected_graph[2]))  # Track shown graphs
        session['shown_graphs'] = shown_graphs  # Save shown graphs in session
        return selected_graph[0]  # Return the selected graph for rendering

    # Fallback: Generate a histogram if no other combination is available
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()
    if len(numerical_cols) >= 1:
        graph = px.histogram(df, x=numerical_cols[0], title=f'Histogram of {numerical_cols[0]}')
        return graph

    print("No new graphs available for display.")
    return None

if __name__ == '__main__':
    app.run(debug=True)
